(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var w = window.innerWidth * window.devicePixelRatio,
    h = window.innerHeight * window.devicePixelRatio;

//var game = new Phaser.Game((h > w) ? h : w, (h > w) ? w : h, Phaser.AUTO, 'naapurinkauhu-game');
var game = new Phaser.Game(1024, 768, Phaser.AUTO, 'naapurinkauhu-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
//game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('GameOver', require('./states/gameover'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\boot.js","./states/game":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\game.js","./states/gameover":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\gameover.js","./states/menu":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\menu.js","./states/preloader":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\preloader.js","./utils":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\utils.js"}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\entities\\player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
};

module.exports = Player;

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    //this.game.input.maxPointers = 1;

    this.input.maxPointers = 1;
    this.stage.disableVisibilityChange = true;

    if (this.game.device.desktop)
    {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.setMinMax(480, 260, 1024, 768);
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.scale.setScreenSize(true);
        this.scale.refresh();
    }
    else
    {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.setMinMax(480, 260, 1024, 768);
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.scale.forceOrientation(true, false);
        this.scale.setResizeCallback(this.gameResized, this);
        this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this);
        this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this);
        this.scale.setScreenSize(true);
        this.scale.refresh();
    }

    this.game.state.start('Preloader');
  },

  gameResized: function (width, height) {

        //  This could be handy if you need to do any extra processing if the game resizes.
        //  A resize could happen if for example swapping orientation on a device or resizing the browser window.
        //  Note that this callback is only really useful if you use a ScaleMode of RESIZE and place it inside your main game state.

    },

    enterIncorrectOrientation: function () {

        BasicGame.orientated = false;

        document.getElementById('orientation').style.display = 'block';

    },

    leaveIncorrectOrientation: function () {

        BasicGame.orientated = true;

        document.getElementById('orientation').style.display = 'none';

    }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\game.js":[function(require,module,exports){
var Player = require('../entities/player');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    //this.enemys = this.game.add.group();

    this.game.input.addPointer();

    this.enemys = [];

    this.skyprite = this.game.add.tileSprite(0, 0, this.game.width, this.game.height, 'sky');
    this.groundsprite = this.game.add.tileSprite(0, this.game.height / 2 + 50, this.game.width, this.game.height / 2, 'ground');
    this.crosshair = this.game.add.sprite(this.game.width / 2 - 202, this.game.height - 213, 'konekivaari');

    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.time.events.loop(Phaser.Timer.HALF, this.createEnemy, this);
    this.crosshair = this.game.add.sprite(100, this.game.height/2 + 50, 'crosshair');
    this.crosshair.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.crosshair, Phaser.Physics.ARCADE);
    this.nextFire = 0;
    this.fireRate = 50;
    this.enemyCreated = 0;
    this.enemyKilled = 0;
    this.score = 0;

    this.fireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    this.fx = this.game.add.audio('sfx');

    this.fx.addMarker('alien death', 1, 1.0);
    this.fx.addMarker('boss hit', 3, 0.5);
    this.fx.addMarker('escape', 4, 3.2);
    this.fx.addMarker('meow', 8, 0.5);
    this.fx.addMarker('numkey', 9, 0.1);
    this.fx.addMarker('ping', 10, 1.0);
    this.fx.addMarker('death', 12, 4.2);
    this.fx.addMarker('shot', 17, 1.0);
    this.fx.addMarker('squit', 19, 0.3);

    // Bullets
    this.bullets = 500;
    this.bulletsLeftText = this.add.bitmapText(0, 20, 'minecraftia', this.bullets.toString() );
    //this.bulletsLeftText.align = 'center';
    this.bulletsLeftText.x = this.game.width - this.bulletsLeftText.textWidth - 20;
  },

  update: function () {

    if (this.fireButton.isDown || this.game.input.activePointer.isDown )
      {
        //console.log('FIRE!');

        // Moving?
	      this.crosshair.x = this.game.input.mousePointer.x;
	      this.crosshair.y = this.game.input.mousePointer.y;

	      


        //console.log('this.game.time.now ' + this.game.time.now);
        //console.log('this.nextFire ' + this.nextFire);

        if (this.game.time.now > this.nextFire )
        {
          this.nextFire = this.game.time.now + this.fireRate;
          this.fx.play('shot');
          this.bullets -= 1;

          if(this.bullets <= 0) {
            this.bulletsLeftText.setText(0);
            this.endGame();
          } else {
            this.bulletsLeftText.setText(this.bullets.toString());
          }

          for (var i = this.enemys.length - 1; i >= 0; i--) 
          {
            //var enemy = this.enemys.getAt(i);
            var enemy = this.enemys[i];
            if (this.checkOverlap(this.crosshair, enemy))
            {
              enemy.kill();
              this.score++;
            }
          }
        }
      }

      

      // Scale enemy
      for (var j = this.enemys.length - 1; j >= 0; j--) 
      {
        var tenemy = this.enemys[j];
        tenemy.y += 0.05;
        tenemy.x -= 0.01;
        tenemy.scale.x += 0.001;
        tenemy.scale.y += 0.001;
      }

      //
      //this.crosshair.scale.x += 0.1;
      //this.crosshair.scale.y += 0.1;
  },

  collisionHandler: function (obj1, obj2) {
    //this.game.stage.backgroundColor = '#FF6600';
    //console.log('collision!' + obj2 + obj1);

  },

  endGame: function () {
    this.bulletsLeftText.setText('0');
    this.game.state.start('GameOver');
  },

  checkOverlap: function (spriteA, spriteB) {
    var boundsA = spriteA.getBounds();
    var boundsB = spriteB.getBounds();

    //console.log(boundsA);
    //console.log(boundsB);
    //boundsA.width = 20;
    //boundsA.height = 20;

    return Phaser.Rectangle.intersects(boundsA, boundsB);
  },

  createEnemy: function () {
    var x = this.game.width - 100
      , y = this.game.height / 2;

    this.enemyCreated += 1;

    var random = this.game.rnd.realInRange(0,x);
    for (var j = this.enemys.length - 1; j >= 0; j--) 
    {
      var tenemy = this.enemys[j];
      if(random > tenemy.x && random < (tenemy.x + 100)) {
        random = this.game.rnd.realInRange(0,x);
      }
    }

    var enemy = this.game.add.sprite(random, y, 'enemy');
    
    //enemy.scale.setTo(5,5);
    //console.log("enemy width: " + enemy.width);
    //console.log("window width: " + this.game.width);

    /*if(enemy.x >= this.game.x - enemy.width) {

    }*/

    enemy.enableBody = true;
    enemy.physicsBodyType = Phaser.Physics.ARCADE;
    
    //this.enemys.create(enemy);
    this.enemys.push(enemy);

    this.game.world.bringToTop(this.crosshair);
  },

  playerInputDown: function (event) {
    //console.log(event);
    event.kill();

  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/player":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\entities\\player.js"}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\gameover.js":[function(require,module,exports){
var Gameover = function () {};

module.exports = Gameover;

Gameover.prototype = {

  create: function () {
    var x = this.game.width / 2
      , y = this.game.height / 2;

    this.titleTxt = this.add.bitmapText(x, y, 'minecraftia', 'Killed: ' );
    this.titleTxt.align = 'center';
    this.titleTxt.x = this.game.width / 2 - this.titleTxt.textWidth / 2;

    y = y + this.titleTxt.height + 5;
    this.startTxt = this.add.bitmapText(x, y, 'minecraftia', 'GAME OVER');
    this.startTxt.align = 'center';
    this.startTxt.x = this.game.width / 2 - this.startTxt.textWidth / 2;
    
    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start('Menu');
    //this.game.state.start('Gameover');
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2
      , y = this.game.height / 2;

    this.titleTxt = this.add.bitmapText(x, y, 'minecraftia', 'Naapurinkauhu' );
    this.titleTxt.align = 'center';
    this.titleTxt.x = this.game.width / 2 - this.titleTxt.textWidth / 2;

    this.startTxt = this.add.bitmapText(x, y + this.titleTxt.height + 5, 'minecraftia', 'Press screen to start');
    this.startTxt.align = 'center';
    this.startTxt.x = this.game.width / 2 - this.startTxt.textWidth / 2;

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start('Game');
    //this.game.scale.startFullScreen();
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);
      this.load.image('target', 'assets/target.png');
      this.load.image('player', 'assets/player.png');
      this.load.image('bunny', 'assets/bunny.png');
      this.load.image('enemy', 'assets/enemy.png');
      this.load.image('konekivaari', 'assets/tykki.png');
      this.load.image('sky', 'assets/sky.jpg');
      this.load.image('ground', 'assets/ground.jpg');
      this.load.image('crosshair', 'assets/target.png');
      this.load.bitmapFont('minecraftia', 'assets/minecraftia.png', 'assets/minecraftia.xml');
      this.load.audio('sfx', 'assets/audio/SoundEffects/fx_mixdown.ogg');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
        this.game.state.start('Menu');
      }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
