(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var w = window.innerWidth * window.devicePixelRatio,
    h = window.innerHeight * window.devicePixelRatio;

//var game = new Phaser.Game((h > w) ? h : w, (h > w) ? w : h, Phaser.AUTO, 'naapurinkauhu-game');
var game = new Phaser.Game(1024, 768, Phaser.AUTO, 'naapurinkauhu-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
//game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('GameOver', require('./states/gameover'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\boot.js","./states/game":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\game.js","./states/gameover":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\gameover.js","./states/menu":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\menu.js","./states/preloader":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\preloader.js","./utils":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\utils.js"}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\entities\\enemy.js":[function(require,module,exports){
var Enemy = function (game, x, y) {

    Phaser.Sprite.call(this, game, x, y, 'enemySprite');
		game.add.existing(this);
		this.animations.add('run');
		this.animations.play('run', 25, true);

		this.hitPoints = 5;

		this.healthBar = new Phaser.Rectangle(this.x, this.y, 30, 5);
		//game.debug.geom(this.healthBar,'#ff6600');
};

Enemy.prototype = Object.create(Phaser.Sprite.prototype);
Enemy.prototype.constructor = Enemy;

/**
 * Automatically called by World.update
 */
Enemy.prototype.update = function() {
	this.move();

	if(this.hitPoints < 5) {
		this.healthBar.x = this.x + this.width / 2 - 15;
		this.healthBar.y = this.y;
		this.healthBar.width = this.hitPoints * (30 / 5);
		this.game.debug.geom(this.healthBar,'#ff6600');
	}
	
};

Enemy.prototype.move = function() {
	this.y += 1.7;
};

Enemy.prototype.hit = function() {
	this.hitPoints -= 1;
	this.bloodSpread();
};

Enemy.prototype.bloodSpread = function() {
	console.log('SPLÃ„TS');

};



module.exports = Enemy;

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    //this.game.input.maxPointers = 1;

    this.input.maxPointers = 1;
    this.stage.disableVisibilityChange = true;

    if (this.game.device.desktop)
    {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.setMinMax(480, 260, 1024, 768);
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.scale.setScreenSize(true);
        this.scale.refresh();
    }
    else
    {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.setMinMax(480, 260, 1024, 768);
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.scale.forceOrientation(true, false);
        this.scale.setResizeCallback(this.gameResized, this);
        this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this);
        this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this);
        this.scale.setScreenSize(true);
        this.scale.refresh();
    }

    this.game.state.start('Preloader');
  },

  gameResized: function (width, height) {

        //  This could be handy if you need to do any extra processing if the game resizes.
        //  A resize could happen if for example swapping orientation on a device or resizing the browser window.
        //  Note that this callback is only really useful if you use a ScaleMode of RESIZE and place it inside your main game state.

    },

    enterIncorrectOrientation: function () {

        BasicGame.orientated = false;

        document.getElementById('orientation').style.display = 'block';

    },

    leaveIncorrectOrientation: function () {

        BasicGame.orientated = true;

        document.getElementById('orientation').style.display = 'none';

    }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\game.js":[function(require,module,exports){
var Enemy = require('../entities/enemy');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    this.grassTileSprite = this.game.add.tileSprite(0, 0, this.game.width, this.game.height, 'dark_grass');
    this.sandTilesprite = this.game.add.tileSprite(0, this.game.height - 128, this.game.width, 128, 'earth');

    this.game.time.advancedTiming = true;

    this.enemysSoldiers = [];
    this.soldiers = [];
    this.enemySoldiersCount = 5;
    this.soldiersCount = 10;
    this.gameover = false;

    this.soldiersLeftText = this.add.bitmapText(0, 20, 'minecraftia', this.soldiersCount.toString() );
    this.soldiersLeftText.x = this.game.width - this.soldiersLeftText.textWidth - 20;

    // Bullets
    this.fireRate = 50;
    this.nextFire = 10;

    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;

    this.bullets.createMultiple(100, 'bullet');
    this.bullets.setAll('checkWorldBounds', true);
    this.bullets.setAll('outOfBoundsKill', true);

    this.sprite = this.game.add.sprite(this.game.width / 2, this.game.height - 70, 'turret');
    this.sprite.anchor.set(0.5);

    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);

    this.sprite.body.allowRotation = false;

    // Enemy animations 
    this.enemyDyingAnimations = this.game.add.group();

    for (var i = 0; i < 500; i++)
    {
        var enemyDyingAnimation = this.enemyDyingAnimations.create(0, 0, 'enemydying', [0], false);
        enemyDyingAnimation.anchor.setTo(0, -0.25);
        enemyDyingAnimation.animations.add('enemydying');
    }

    // concentratedFire
    this.explosions = this.game.add.group();
    this.explosions.enableBody = true;
    this.explosions.physicsBodyType = Phaser.Physics.ARCADE;
    for (var j = 0; j < 10; j++)
    {
        var explosionAnimation = this.explosions.create(0, 0, 'smallExplosion', [0], false);
        explosionAnimation.anchor.setTo(0.5, 0.5);
        explosionAnimation.animations.add('smallExplosion');
    }

    /*this.bot = this.game.add.sprite(100, 100, 'enemySprite');
    this.bot.animations.add('run');
    this.bot.animations.play('run', 25, true);*/

    this.concentratedFireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

    this.emitter = this.game.add.emitter(0, 0, 100);
    this.emitter.particleFriction = 0.1;

  },

  update: function () {

    this.game.debug.text(this.game.time.fps || '--', 2, 14, '#00ff00');   

    if(this.gameover) return;

    if(this.enemysSoldiers.length < this.enemySoldiersCount){
      this.createEnemy();
    }

    for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
      var enemy = this.enemysSoldiers[i];

      this.game.physics.arcade.overlap(this.bullets, this.enemysSoldiers[i], this.bulletHitEnemy, null, this);
      
      //this.game.physics.arcade.overlap(this.explosions, this.enemysSoldiers[i], this.hitEnemy, null, this);


      //this.enemysSoldiers[i].update();
      if(enemy.y >= this.game.height - 70) {
        this.soldiersCount -= 1;
        
         enemy.destroy();
        this.enemysSoldiers.splice(i,1);
        this.soldiersLeftText.setText(this.soldiersCount.toString());

        var enemyDyingAnimation = this.enemyDyingAnimations.getFirstExists(false);
        enemyDyingAnimation.reset(enemy.x, enemy.y);
        
        //enemyDyingAnimation.play('kaboom', 30, false, true);

        if(this.soldiersCount <= 0){
          //console.log("PELI LOPPU!");
          this.game.state.start('GameOver');
        }
      }

    }

    this.sprite.rotation = this.game.physics.arcade.angleToPointer(this.sprite);
    if (this.game.input.activePointer.isDown)
    {
      this.fire();
    }

    if (this.concentratedFireButton.isDown) {
       this.concentratedFire(this.game.input.activePointer.x - 100,this.game.input.activePointer.y - 100);
    }

    //this.game.debug.spriteBounds(this.explosions);
    //this.game.debug.spriteCorners(this.explosions, true, true);

  },

  fire: function () {
    if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0)
        {
            this.nextFire = this.game.time.now + this.fireRate;

            var bullet = this.bullets.getFirstDead();

            bullet.reset(this.sprite.x - 8, this.sprite.y - 8);

            this.game.physics.arcade.moveToPointer(bullet, 1500);
            bullet.rotation = this.game.physics.arcade.moveToPointer(bullet, 2500, this.game.input.activePointer, 400);
        }
  },

  concentratedFire: function (x,y) {
        //console.log(this.explosions.x);

        for (var i = this.explosions.length - 1; i >= 0; i--) {
          var explosionsAnimation = this.explosions.getAt(i);
          explosionsAnimation.reset(x + Math.random()*200, y + Math.random()*200);
          //enemyDyingAnimation.reset(x, y);
          explosionsAnimation.play('smallExplosion', 30, false, true);
          //console.log('---------------------');
          //console.log(explosionsAnimation.x);
          //console.log(explosionsAnimation.y);
        }

        for (var j = this.enemysSoldiers.length - 1; j >= 0; j--) {
          var enemy = this.enemysSoldiers[j];
 
          this.game.physics.arcade.overlap(this.explosions, enemy, this.hitEnemy, null, this);
          
        }
  },

  bulletHitEnemy: function (enemy, bullet) {

      this.emitter.makeParticles('blood');
      //var blood = new Phaser.Rectangle(0, 0, 30, 5);
      //this.emitter.makeParticles(blood);

      //this.emitter.rotation = bullet.rotation;

      console.log(bullet.rotation);

      this.emitter.gravity = 0;
      this.emitter.maxRotation = 0;
      this.emitter.minRotation = 0;

      this.emitter.setAlpha(1, 0, 600);

      var p1 = new Phaser.Point (1,0);
      p1.rotate(0,0,bullet.rotation + 0.5);
      p1.setMagnitude(200);
      
      var p2 = new Phaser.Point (1,0);
      p2.rotate(0,0,bullet.rotation - 0.5);
      p2.setMagnitude(200);

      this.emitter.maxParticleSpeed = p1;
      this.emitter.minParticleSpeed = p2;
      //this.emitter.rotation = 0;
      this.emitter.x = enemy.x + 30;
      this.emitter.y = enemy.y + 35;

      this.emitter.start(true, 600, null, 10);

      bullet.kill();

      for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
        if(enemy === this.enemysSoldiers[i])
        {
          console.log('.... ' + enemy.hitPoints);
          enemy.hit();

          if(enemy.hitPoints === 0) {
            this.enemysSoldiers.splice(i,1);

            var enemyDyingAnimation = this.enemyDyingAnimations.getFirstExists(false);
            enemyDyingAnimation.reset(enemy.x, enemy.y);
            enemyDyingAnimation.play('enemydying', 30, false, false);
            this.game.time.events.add(Phaser.Timer.SECOND * 1, this.killAnimation, this, enemyDyingAnimation);
          }
        }
      }
      
      if(enemy.hitPoints === 0) {
        enemy.kill();
      }

      //var destroyed = enemies[tank.name].damage();

      /*if (destroyed)
      {
          var explosionAnimation = explosions.getFirstExists(false);
          explosionAnimation.reset(tank.x, tank.y);
          explosionAnimation.play('kaboom', 30, false, true);
      }*/
  },

  killAnimation: function (animation) {
    //console.log('enemyDyingAnimation');
    this.game.add.tween(animation).to( { alpha: 0 }, 1000, Phaser.Easing.Linear.None, true);
  },

  hitEnemy: function (enemy) {
    //console.log('HIT!');
    for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
      if(enemy === this.enemysSoldiers[i])
      {
        this.enemysSoldiers.splice(i,1);

        var enemyDyingAnimation = this.enemyDyingAnimations.getFirstExists(false);
        enemyDyingAnimation.reset(enemy.x, enemy.y);
        enemyDyingAnimation.play('enemydying', 30, false, false);
      }
    }
    enemy.kill();
  },

  createEnemy: function () {
    var enemy = new Enemy(this.game, this.game.world.randomX, 0);
    this.game.physics.enable(enemy, Phaser.Physics.ARCADE);
    this.enemysSoldiers.push(enemy);
    
  },

  checkOverlap: function (spriteA, spriteB) {
    var boundsA = spriteA.getBounds();
    var boundsB = spriteB.getBounds();

    return Phaser.Rectangle.intersects(boundsA, boundsB);
  },

  endGame: function () {
    
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/enemy":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\entities\\enemy.js"}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\gameover.js":[function(require,module,exports){
var Gameover = function () {};

module.exports = Gameover;

Gameover.prototype = {

  create: function () {
    var x = this.game.width / 2
      , y = this.game.height / 2;

    /*this.titleTxt = this.add.bitmapText(x, y, 'minecraftia', 'Killed: ' );
    this.titleTxt.align = 'center';
    this.titleTxt.x = this.game.width / 2 - this.titleTxt.textWidth / 2;*/

    //y = y + this.titleTxt.height + 5;
    this.startTxt = this.add.bitmapText(x, y, 'minecraftia', 'GAME OVER');
    this.startTxt.align = 'center';
    this.startTxt.x = this.game.width / 2 - this.startTxt.textWidth / 2;
    
    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start('Menu');
    //this.game.state.start('Gameover');
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2
      , y = this.game.height / 2;

    
    this.logoText = this.add.bitmapText(x, y - 200, 'minecraftia', 'LSG', 164 );
    this.logoText.align = 'center';
    this.logoText.x = this.game.width / 2 - this.logoText.textWidth / 2;

    this.desciptionTxt = this.add.bitmapText(x, y + 10, 'minecraftia', 'LITTLE SHITTY GAMES', 27 );
    this.desciptionTxt.align = 'center';
    this.desciptionTxt.x = this.game.width / 2 - this.desciptionTxt.textWidth / 2;

    this.titleTxt = this.add.bitmapText(x, y + 100, 'minecraftia', 'Naapurinkauhu' );
    this.titleTxt.align = 'center';
    this.titleTxt.x = this.game.width / 2 - this.titleTxt.textWidth / 2;

    this.startTxt = this.add.bitmapText(x, this.game.height - this.titleTxt.height - 15, 'minecraftia', 'Press screen to start');
    this.startTxt.align = 'center';
    this.startTxt.x = this.game.width / 2 - this.startTxt.textWidth / 2;

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start('Game');
    //this.game.scale.startFullScreen();
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);
      this.load.spritesheet('kaboom', 'assets/explosion.png', 64, 64, 23);
      this.load.spritesheet('bigExplosion', 'assets/big-explosion.png', 256, 128, 12);
      this.load.spritesheet('smallExplosion', 'assets/small-explosion.png', 96, 96, 48);
      this.load.spritesheet('enemydying', 'assets/enemydying.png', 63, 64, 20);
      this.load.spritesheet('enemySprite', 'assets/enemy.png', 64, 64, 15);
      this.load.image('dark_grass', 'assets/dark_grass.png');
      this.load.image('blood', 'assets/blood.jpg');
      this.load.image('earth', 'assets/earth.png');
      this.load.image('enemy', 'assets/invader.png');
      this.load.image('turret', 'assets/turret.png');
      this.load.image('bullet', 'assets/bullet.png');
      this.load.bitmapFont('minecraftia', 'assets/minecraftia.png', 'assets/minecraftia.xml');
      this.load.audio('sfx', 'assets/audio/SoundEffects/fx_mixdown.ogg');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
        this.game.state.start('Menu');
      }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3NlcmlmeVxcbm9kZV9tb2R1bGVzXFxicm93c2VyLXBhY2tcXF9wcmVsdWRlLmpzIiwic3JjXFxqc1xcbWFpbi5qcyIsInNyY1xcanNcXGVudGl0aWVzXFxlbmVteS5qcyIsInNyY1xcanNcXHN0YXRlc1xcYm9vdC5qcyIsInNyY1xcanNcXHN0YXRlc1xcZ2FtZS5qcyIsInNyY1xcanNcXHN0YXRlc1xcZ2FtZW92ZXIuanMiLCJzcmNcXGpzXFxzdGF0ZXNcXG1lbnUuanMiLCJzcmNcXGpzXFxzdGF0ZXNcXHByZWxvYWRlci5qcyIsInNyY1xcanNcXHV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XG5cbnZhciB3ID0gd2luZG93LmlubmVyV2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICBoID0gd2luZG93LmlubmVySGVpZ2h0ICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XG5cbi8vdmFyIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoKGggPiB3KSA/IGggOiB3LCAoaCA+IHcpID8gdyA6IGgsIFBoYXNlci5BVVRPLCAnbmFhcHVyaW5rYXVodS1nYW1lJyk7XG52YXIgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSgxMDI0LCA3NjgsIFBoYXNlci5BVVRPLCAnbmFhcHVyaW5rYXVodS1nYW1lJyk7XG5cbndpbmRvdy5VdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbndpbmRvdy5wbGF5ZXJTdGF0ZSA9IHtcbiAgICBjdXJyZW50TGV2ZWw6ICdHYW1lJ1xufVxuXG5nYW1lLnN0YXRlLmFkZCgnQm9vdCcsIHJlcXVpcmUoJy4vc3RhdGVzL2Jvb3QnKSk7XG4vL2dhbWUuc3RhdGUuYWRkKCdTcGxhc2gnLCByZXF1aXJlKCcuL3N0YXRlcy9zcGxhc2gnKSk7XG5nYW1lLnN0YXRlLmFkZCgnUHJlbG9hZGVyJywgcmVxdWlyZSgnLi9zdGF0ZXMvcHJlbG9hZGVyJykpO1xuZ2FtZS5zdGF0ZS5hZGQoJ01lbnUnLCByZXF1aXJlKCcuL3N0YXRlcy9tZW51JykpO1xuZ2FtZS5zdGF0ZS5hZGQoJ0dhbWVPdmVyJywgcmVxdWlyZSgnLi9zdGF0ZXMvZ2FtZW92ZXInKSk7XG5nYW1lLnN0YXRlLmFkZCgnR2FtZScsIHJlcXVpcmUoJy4vc3RhdGVzL2dhbWUnKSk7XG5cbmdhbWUuc3RhdGUuc3RhcnQoJ0Jvb3QnKTtcbiIsInZhciBFbmVteSA9IGZ1bmN0aW9uIChnYW1lLCB4LCB5KSB7XG5cbiAgICBQaGFzZXIuU3ByaXRlLmNhbGwodGhpcywgZ2FtZSwgeCwgeSwgJ2VuZW15U3ByaXRlJyk7XG5cdFx0Z2FtZS5hZGQuZXhpc3RpbmcodGhpcyk7XG5cdFx0dGhpcy5hbmltYXRpb25zLmFkZCgncnVuJyk7XG5cdFx0dGhpcy5hbmltYXRpb25zLnBsYXkoJ3J1bicsIDI1LCB0cnVlKTtcblxuXHRcdHRoaXMuaGl0UG9pbnRzID0gNTtcblxuXHRcdHRoaXMuaGVhbHRoQmFyID0gbmV3IFBoYXNlci5SZWN0YW5nbGUodGhpcy54LCB0aGlzLnksIDMwLCA1KTtcblx0XHQvL2dhbWUuZGVidWcuZ2VvbSh0aGlzLmhlYWx0aEJhciwnI2ZmNjYwMCcpO1xufTtcblxuRW5lbXkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQaGFzZXIuU3ByaXRlLnByb3RvdHlwZSk7XG5FbmVteS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFbmVteTtcblxuLyoqXG4gKiBBdXRvbWF0aWNhbGx5IGNhbGxlZCBieSBXb3JsZC51cGRhdGVcbiAqL1xuRW5lbXkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHR0aGlzLm1vdmUoKTtcblxuXHRpZih0aGlzLmhpdFBvaW50cyA8IDUpIHtcblx0XHR0aGlzLmhlYWx0aEJhci54ID0gdGhpcy54ICsgdGhpcy53aWR0aCAvIDIgLSAxNTtcblx0XHR0aGlzLmhlYWx0aEJhci55ID0gdGhpcy55O1xuXHRcdHRoaXMuaGVhbHRoQmFyLndpZHRoID0gdGhpcy5oaXRQb2ludHMgKiAoMzAgLyA1KTtcblx0XHR0aGlzLmdhbWUuZGVidWcuZ2VvbSh0aGlzLmhlYWx0aEJhciwnI2ZmNjYwMCcpO1xuXHR9XG5cdFxufTtcblxuRW5lbXkucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbigpIHtcblx0dGhpcy55ICs9IDEuNztcbn07XG5cbkVuZW15LnByb3RvdHlwZS5oaXQgPSBmdW5jdGlvbigpIHtcblx0dGhpcy5oaXRQb2ludHMgLT0gMTtcblx0dGhpcy5ibG9vZFNwcmVhZCgpO1xufTtcblxuRW5lbXkucHJvdG90eXBlLmJsb29kU3ByZWFkID0gZnVuY3Rpb24oKSB7XG5cdGNvbnNvbGUubG9nKCdTUEzDhFRTJyk7XG5cbn07XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEVuZW15O1xuIiwidmFyIEJvb3QgPSBmdW5jdGlvbiAoKSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb290O1xuXG5Cb290LnByb3RvdHlwZSA9IHtcblxuICBwcmVsb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5sb2FkLmltYWdlKCdwcmVsb2FkZXInLCAnYXNzZXRzL3ByZWxvYWRlci5naWYnKTtcbiAgfSxcblxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAvL3RoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XG5cbiAgICB0aGlzLmlucHV0Lm1heFBvaW50ZXJzID0gMTtcbiAgICB0aGlzLnN0YWdlLmRpc2FibGVWaXNpYmlsaXR5Q2hhbmdlID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLmdhbWUuZGV2aWNlLmRlc2t0b3ApXG4gICAge1xuICAgICAgICB0aGlzLnNjYWxlLnNjYWxlTW9kZSA9IFBoYXNlci5TY2FsZU1hbmFnZXIuU0hPV19BTEw7XG4gICAgICAgIHRoaXMuc2NhbGUuc2V0TWluTWF4KDQ4MCwgMjYwLCAxMDI0LCA3NjgpO1xuICAgICAgICB0aGlzLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NhbGUucGFnZUFsaWduVmVydGljYWxseSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NhbGUuc2V0U2NyZWVuU2l6ZSh0cnVlKTtcbiAgICAgICAgdGhpcy5zY2FsZS5yZWZyZXNoKCk7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIHRoaXMuc2NhbGUuc2NhbGVNb2RlID0gUGhhc2VyLlNjYWxlTWFuYWdlci5TSE9XX0FMTDtcbiAgICAgICAgdGhpcy5zY2FsZS5zZXRNaW5NYXgoNDgwLCAyNjAsIDEwMjQsIDc2OCk7XG4gICAgICAgIHRoaXMuc2NhbGUucGFnZUFsaWduSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2FsZS5wYWdlQWxpZ25WZXJ0aWNhbGx5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2FsZS5mb3JjZU9yaWVudGF0aW9uKHRydWUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zY2FsZS5zZXRSZXNpemVDYWxsYmFjayh0aGlzLmdhbWVSZXNpemVkLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zY2FsZS5lbnRlckluY29ycmVjdE9yaWVudGF0aW9uLmFkZCh0aGlzLmVudGVySW5jb3JyZWN0T3JpZW50YXRpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLnNjYWxlLmxlYXZlSW5jb3JyZWN0T3JpZW50YXRpb24uYWRkKHRoaXMubGVhdmVJbmNvcnJlY3RPcmllbnRhdGlvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMuc2NhbGUuc2V0U2NyZWVuU2l6ZSh0cnVlKTtcbiAgICAgICAgdGhpcy5zY2FsZS5yZWZyZXNoKCk7XG4gICAgfVxuXG4gICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdQcmVsb2FkZXInKTtcbiAgfSxcblxuICBnYW1lUmVzaXplZDogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcblxuICAgICAgICAvLyAgVGhpcyBjb3VsZCBiZSBoYW5keSBpZiB5b3UgbmVlZCB0byBkbyBhbnkgZXh0cmEgcHJvY2Vzc2luZyBpZiB0aGUgZ2FtZSByZXNpemVzLlxuICAgICAgICAvLyAgQSByZXNpemUgY291bGQgaGFwcGVuIGlmIGZvciBleGFtcGxlIHN3YXBwaW5nIG9yaWVudGF0aW9uIG9uIGEgZGV2aWNlIG9yIHJlc2l6aW5nIHRoZSBicm93c2VyIHdpbmRvdy5cbiAgICAgICAgLy8gIE5vdGUgdGhhdCB0aGlzIGNhbGxiYWNrIGlzIG9ubHkgcmVhbGx5IHVzZWZ1bCBpZiB5b3UgdXNlIGEgU2NhbGVNb2RlIG9mIFJFU0laRSBhbmQgcGxhY2UgaXQgaW5zaWRlIHlvdXIgbWFpbiBnYW1lIHN0YXRlLlxuXG4gICAgfSxcblxuICAgIGVudGVySW5jb3JyZWN0T3JpZW50YXRpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBCYXNpY0dhbWUub3JpZW50YXRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcmllbnRhdGlvbicpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgfSxcblxuICAgIGxlYXZlSW5jb3JyZWN0T3JpZW50YXRpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBCYXNpY0dhbWUub3JpZW50YXRlZCA9IHRydWU7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29yaWVudGF0aW9uJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIH1cbn07XG4iLCJ2YXIgRW5lbXkgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9lbmVteScpO1xyXG5cclxudmFyIEdhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy50ZXN0ZW50aXR5ID0gbnVsbDtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gR2FtZTtcclxuXHJcbkdhbWUucHJvdG90eXBlID0ge1xyXG5cclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZ3Jhc3NUaWxlU3ByaXRlID0gdGhpcy5nYW1lLmFkZC50aWxlU3ByaXRlKDAsIDAsIHRoaXMuZ2FtZS53aWR0aCwgdGhpcy5nYW1lLmhlaWdodCwgJ2RhcmtfZ3Jhc3MnKTtcclxuICAgIHRoaXMuc2FuZFRpbGVzcHJpdGUgPSB0aGlzLmdhbWUuYWRkLnRpbGVTcHJpdGUoMCwgdGhpcy5nYW1lLmhlaWdodCAtIDEyOCwgdGhpcy5nYW1lLndpZHRoLCAxMjgsICdlYXJ0aCcpO1xyXG5cclxuICAgIHRoaXMuZ2FtZS50aW1lLmFkdmFuY2VkVGltaW5nID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmVuZW15c1NvbGRpZXJzID0gW107XHJcbiAgICB0aGlzLnNvbGRpZXJzID0gW107XHJcbiAgICB0aGlzLmVuZW15U29sZGllcnNDb3VudCA9IDU7XHJcbiAgICB0aGlzLnNvbGRpZXJzQ291bnQgPSAxMDtcclxuICAgIHRoaXMuZ2FtZW92ZXIgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLnNvbGRpZXJzTGVmdFRleHQgPSB0aGlzLmFkZC5iaXRtYXBUZXh0KDAsIDIwLCAnbWluZWNyYWZ0aWEnLCB0aGlzLnNvbGRpZXJzQ291bnQudG9TdHJpbmcoKSApO1xyXG4gICAgdGhpcy5zb2xkaWVyc0xlZnRUZXh0LnggPSB0aGlzLmdhbWUud2lkdGggLSB0aGlzLnNvbGRpZXJzTGVmdFRleHQudGV4dFdpZHRoIC0gMjA7XHJcblxyXG4gICAgLy8gQnVsbGV0c1xyXG4gICAgdGhpcy5maXJlUmF0ZSA9IDUwO1xyXG4gICAgdGhpcy5uZXh0RmlyZSA9IDEwO1xyXG5cclxuICAgIHRoaXMuYnVsbGV0cyA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgIHRoaXMuYnVsbGV0cy5lbmFibGVCb2R5ID0gdHJ1ZTtcclxuICAgIHRoaXMuYnVsbGV0cy5waHlzaWNzQm9keVR5cGUgPSBQaGFzZXIuUGh5c2ljcy5BUkNBREU7XHJcblxyXG4gICAgdGhpcy5idWxsZXRzLmNyZWF0ZU11bHRpcGxlKDEwMCwgJ2J1bGxldCcpO1xyXG4gICAgdGhpcy5idWxsZXRzLnNldEFsbCgnY2hlY2tXb3JsZEJvdW5kcycsIHRydWUpO1xyXG4gICAgdGhpcy5idWxsZXRzLnNldEFsbCgnb3V0T2ZCb3VuZHNLaWxsJywgdHJ1ZSk7XHJcblxyXG4gICAgdGhpcy5zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSh0aGlzLmdhbWUud2lkdGggLyAyLCB0aGlzLmdhbWUuaGVpZ2h0IC0gNzAsICd0dXJyZXQnKTtcclxuICAgIHRoaXMuc3ByaXRlLmFuY2hvci5zZXQoMC41KTtcclxuXHJcbiAgICB0aGlzLmdhbWUucGh5c2ljcy5lbmFibGUodGhpcy5zcHJpdGUsIFBoYXNlci5QaHlzaWNzLkFSQ0FERSk7XHJcblxyXG4gICAgdGhpcy5zcHJpdGUuYm9keS5hbGxvd1JvdGF0aW9uID0gZmFsc2U7XHJcblxyXG4gICAgLy8gRW5lbXkgYW5pbWF0aW9ucyBcclxuICAgIHRoaXMuZW5lbXlEeWluZ0FuaW1hdGlvbnMgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1MDA7IGkrKylcclxuICAgIHtcclxuICAgICAgICB2YXIgZW5lbXlEeWluZ0FuaW1hdGlvbiA9IHRoaXMuZW5lbXlEeWluZ0FuaW1hdGlvbnMuY3JlYXRlKDAsIDAsICdlbmVteWR5aW5nJywgWzBdLCBmYWxzZSk7XHJcbiAgICAgICAgZW5lbXlEeWluZ0FuaW1hdGlvbi5hbmNob3Iuc2V0VG8oMCwgLTAuMjUpO1xyXG4gICAgICAgIGVuZW15RHlpbmdBbmltYXRpb24uYW5pbWF0aW9ucy5hZGQoJ2VuZW15ZHlpbmcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25jZW50cmF0ZWRGaXJlXHJcbiAgICB0aGlzLmV4cGxvc2lvbnMgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICB0aGlzLmV4cGxvc2lvbnMuZW5hYmxlQm9keSA9IHRydWU7XHJcbiAgICB0aGlzLmV4cGxvc2lvbnMucGh5c2ljc0JvZHlUeXBlID0gUGhhc2VyLlBoeXNpY3MuQVJDQURFO1xyXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAxMDsgaisrKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBleHBsb3Npb25BbmltYXRpb24gPSB0aGlzLmV4cGxvc2lvbnMuY3JlYXRlKDAsIDAsICdzbWFsbEV4cGxvc2lvbicsIFswXSwgZmFsc2UpO1xyXG4gICAgICAgIGV4cGxvc2lvbkFuaW1hdGlvbi5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICAgICAgIGV4cGxvc2lvbkFuaW1hdGlvbi5hbmltYXRpb25zLmFkZCgnc21hbGxFeHBsb3Npb24nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKnRoaXMuYm90ID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUoMTAwLCAxMDAsICdlbmVteVNwcml0ZScpO1xyXG4gICAgdGhpcy5ib3QuYW5pbWF0aW9ucy5hZGQoJ3J1bicpO1xyXG4gICAgdGhpcy5ib3QuYW5pbWF0aW9ucy5wbGF5KCdydW4nLCAyNSwgdHJ1ZSk7Ki9cclxuXHJcbiAgICB0aGlzLmNvbmNlbnRyYXRlZEZpcmVCdXR0b24gPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUik7XHJcblxyXG4gICAgdGhpcy5lbWl0dGVyID0gdGhpcy5nYW1lLmFkZC5lbWl0dGVyKDAsIDAsIDEwMCk7XHJcbiAgICB0aGlzLmVtaXR0ZXIucGFydGljbGVGcmljdGlvbiA9IDAuMTtcclxuXHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgdGhpcy5nYW1lLmRlYnVnLnRleHQodGhpcy5nYW1lLnRpbWUuZnBzIHx8ICctLScsIDIsIDE0LCAnIzAwZmYwMCcpOyAgIFxyXG5cclxuICAgIGlmKHRoaXMuZ2FtZW92ZXIpIHJldHVybjtcclxuXHJcbiAgICBpZih0aGlzLmVuZW15c1NvbGRpZXJzLmxlbmd0aCA8IHRoaXMuZW5lbXlTb2xkaWVyc0NvdW50KXtcclxuICAgICAgdGhpcy5jcmVhdGVFbmVteSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGkgPSB0aGlzLmVuZW15c1NvbGRpZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgIHZhciBlbmVteSA9IHRoaXMuZW5lbXlzU29sZGllcnNbaV07XHJcblxyXG4gICAgICB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUub3ZlcmxhcCh0aGlzLmJ1bGxldHMsIHRoaXMuZW5lbXlzU29sZGllcnNbaV0sIHRoaXMuYnVsbGV0SGl0RW5lbXksIG51bGwsIHRoaXMpO1xyXG4gICAgICBcclxuICAgICAgLy90aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUub3ZlcmxhcCh0aGlzLmV4cGxvc2lvbnMsIHRoaXMuZW5lbXlzU29sZGllcnNbaV0sIHRoaXMuaGl0RW5lbXksIG51bGwsIHRoaXMpO1xyXG5cclxuXHJcbiAgICAgIC8vdGhpcy5lbmVteXNTb2xkaWVyc1tpXS51cGRhdGUoKTtcclxuICAgICAgaWYoZW5lbXkueSA+PSB0aGlzLmdhbWUuaGVpZ2h0IC0gNzApIHtcclxuICAgICAgICB0aGlzLnNvbGRpZXJzQ291bnQgLT0gMTtcclxuICAgICAgICBcclxuICAgICAgICAgZW5lbXkuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuZW5lbXlzU29sZGllcnMuc3BsaWNlKGksMSk7XHJcbiAgICAgICAgdGhpcy5zb2xkaWVyc0xlZnRUZXh0LnNldFRleHQodGhpcy5zb2xkaWVyc0NvdW50LnRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICB2YXIgZW5lbXlEeWluZ0FuaW1hdGlvbiA9IHRoaXMuZW5lbXlEeWluZ0FuaW1hdGlvbnMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpO1xyXG4gICAgICAgIGVuZW15RHlpbmdBbmltYXRpb24ucmVzZXQoZW5lbXkueCwgZW5lbXkueSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9lbmVteUR5aW5nQW5pbWF0aW9uLnBsYXkoJ2thYm9vbScsIDMwLCBmYWxzZSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuc29sZGllcnNDb3VudCA8PSAwKXtcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJQRUxJIExPUFBVIVwiKTtcclxuICAgICAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnR2FtZU92ZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zcHJpdGUucm90YXRpb24gPSB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUuYW5nbGVUb1BvaW50ZXIodGhpcy5zcHJpdGUpO1xyXG4gICAgaWYgKHRoaXMuZ2FtZS5pbnB1dC5hY3RpdmVQb2ludGVyLmlzRG93bilcclxuICAgIHtcclxuICAgICAgdGhpcy5maXJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29uY2VudHJhdGVkRmlyZUJ1dHRvbi5pc0Rvd24pIHtcclxuICAgICAgIHRoaXMuY29uY2VudHJhdGVkRmlyZSh0aGlzLmdhbWUuaW5wdXQuYWN0aXZlUG9pbnRlci54IC0gMTAwLHRoaXMuZ2FtZS5pbnB1dC5hY3RpdmVQb2ludGVyLnkgLSAxMDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdGhpcy5nYW1lLmRlYnVnLnNwcml0ZUJvdW5kcyh0aGlzLmV4cGxvc2lvbnMpO1xyXG4gICAgLy90aGlzLmdhbWUuZGVidWcuc3ByaXRlQ29ybmVycyh0aGlzLmV4cGxvc2lvbnMsIHRydWUsIHRydWUpO1xyXG5cclxuICB9LFxyXG5cclxuICBmaXJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5nYW1lLnRpbWUubm93ID4gdGhpcy5uZXh0RmlyZSAmJiB0aGlzLmJ1bGxldHMuY291bnREZWFkKCkgPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5uZXh0RmlyZSA9IHRoaXMuZ2FtZS50aW1lLm5vdyArIHRoaXMuZmlyZVJhdGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgYnVsbGV0ID0gdGhpcy5idWxsZXRzLmdldEZpcnN0RGVhZCgpO1xyXG5cclxuICAgICAgICAgICAgYnVsbGV0LnJlc2V0KHRoaXMuc3ByaXRlLnggLSA4LCB0aGlzLnNwcml0ZS55IC0gOCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUubW92ZVRvUG9pbnRlcihidWxsZXQsIDE1MDApO1xyXG4gICAgICAgICAgICBidWxsZXQucm90YXRpb24gPSB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUubW92ZVRvUG9pbnRlcihidWxsZXQsIDI1MDAsIHRoaXMuZ2FtZS5pbnB1dC5hY3RpdmVQb2ludGVyLCA0MDApO1xyXG4gICAgICAgIH1cclxuICB9LFxyXG5cclxuICBjb25jZW50cmF0ZWRGaXJlOiBmdW5jdGlvbiAoeCx5KSB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLmV4cGxvc2lvbnMueCk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmV4cGxvc2lvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgIHZhciBleHBsb3Npb25zQW5pbWF0aW9uID0gdGhpcy5leHBsb3Npb25zLmdldEF0KGkpO1xyXG4gICAgICAgICAgZXhwbG9zaW9uc0FuaW1hdGlvbi5yZXNldCh4ICsgTWF0aC5yYW5kb20oKSoyMDAsIHkgKyBNYXRoLnJhbmRvbSgpKjIwMCk7XHJcbiAgICAgICAgICAvL2VuZW15RHlpbmdBbmltYXRpb24ucmVzZXQoeCwgeSk7XHJcbiAgICAgICAgICBleHBsb3Npb25zQW5pbWF0aW9uLnBsYXkoJ3NtYWxsRXhwbG9zaW9uJywgMzAsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhleHBsb3Npb25zQW5pbWF0aW9uLngpO1xyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhleHBsb3Npb25zQW5pbWF0aW9uLnkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaiA9IHRoaXMuZW5lbXlzU29sZGllcnMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcclxuICAgICAgICAgIHZhciBlbmVteSA9IHRoaXMuZW5lbXlzU29sZGllcnNbal07XHJcbiBcclxuICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5vdmVybGFwKHRoaXMuZXhwbG9zaW9ucywgZW5lbXksIHRoaXMuaGl0RW5lbXksIG51bGwsIHRoaXMpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gIH0sXHJcblxyXG4gIGJ1bGxldEhpdEVuZW15OiBmdW5jdGlvbiAoZW5lbXksIGJ1bGxldCkge1xyXG5cclxuICAgICAgdGhpcy5lbWl0dGVyLm1ha2VQYXJ0aWNsZXMoJ2Jsb29kJyk7XHJcbiAgICAgIC8vdmFyIGJsb29kID0gbmV3IFBoYXNlci5SZWN0YW5nbGUoMCwgMCwgMzAsIDUpO1xyXG4gICAgICAvL3RoaXMuZW1pdHRlci5tYWtlUGFydGljbGVzKGJsb29kKTtcclxuXHJcbiAgICAgIC8vdGhpcy5lbWl0dGVyLnJvdGF0aW9uID0gYnVsbGV0LnJvdGF0aW9uO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYnVsbGV0LnJvdGF0aW9uKTtcclxuXHJcbiAgICAgIHRoaXMuZW1pdHRlci5ncmF2aXR5ID0gMDtcclxuICAgICAgdGhpcy5lbWl0dGVyLm1heFJvdGF0aW9uID0gMDtcclxuICAgICAgdGhpcy5lbWl0dGVyLm1pblJvdGF0aW9uID0gMDtcclxuXHJcbiAgICAgIHRoaXMuZW1pdHRlci5zZXRBbHBoYSgxLCAwLCA2MDApO1xyXG5cclxuICAgICAgdmFyIHAxID0gbmV3IFBoYXNlci5Qb2ludCAoMSwwKTtcclxuICAgICAgcDEucm90YXRlKDAsMCxidWxsZXQucm90YXRpb24gKyAwLjUpO1xyXG4gICAgICBwMS5zZXRNYWduaXR1ZGUoMjAwKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBwMiA9IG5ldyBQaGFzZXIuUG9pbnQgKDEsMCk7XHJcbiAgICAgIHAyLnJvdGF0ZSgwLDAsYnVsbGV0LnJvdGF0aW9uIC0gMC41KTtcclxuICAgICAgcDIuc2V0TWFnbml0dWRlKDIwMCk7XHJcblxyXG4gICAgICB0aGlzLmVtaXR0ZXIubWF4UGFydGljbGVTcGVlZCA9IHAxO1xyXG4gICAgICB0aGlzLmVtaXR0ZXIubWluUGFydGljbGVTcGVlZCA9IHAyO1xyXG4gICAgICAvL3RoaXMuZW1pdHRlci5yb3RhdGlvbiA9IDA7XHJcbiAgICAgIHRoaXMuZW1pdHRlci54ID0gZW5lbXkueCArIDMwO1xyXG4gICAgICB0aGlzLmVtaXR0ZXIueSA9IGVuZW15LnkgKyAzNTtcclxuXHJcbiAgICAgIHRoaXMuZW1pdHRlci5zdGFydCh0cnVlLCA2MDAsIG51bGwsIDEwKTtcclxuXHJcbiAgICAgIGJ1bGxldC5raWxsKCk7XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5lbmVteXNTb2xkaWVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIGlmKGVuZW15ID09PSB0aGlzLmVuZW15c1NvbGRpZXJzW2ldKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCcuLi4uICcgKyBlbmVteS5oaXRQb2ludHMpO1xyXG4gICAgICAgICAgZW5lbXkuaGl0KCk7XHJcblxyXG4gICAgICAgICAgaWYoZW5lbXkuaGl0UG9pbnRzID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5lbXlzU29sZGllcnMuc3BsaWNlKGksMSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZW5lbXlEeWluZ0FuaW1hdGlvbiA9IHRoaXMuZW5lbXlEeWluZ0FuaW1hdGlvbnMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpO1xyXG4gICAgICAgICAgICBlbmVteUR5aW5nQW5pbWF0aW9uLnJlc2V0KGVuZW15LngsIGVuZW15LnkpO1xyXG4gICAgICAgICAgICBlbmVteUR5aW5nQW5pbWF0aW9uLnBsYXkoJ2VuZW15ZHlpbmcnLCAzMCwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChQaGFzZXIuVGltZXIuU0VDT05EICogMSwgdGhpcy5raWxsQW5pbWF0aW9uLCB0aGlzLCBlbmVteUR5aW5nQW5pbWF0aW9uKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKGVuZW15LmhpdFBvaW50cyA9PT0gMCkge1xyXG4gICAgICAgIGVuZW15LmtpbGwoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy92YXIgZGVzdHJveWVkID0gZW5lbWllc1t0YW5rLm5hbWVdLmRhbWFnZSgpO1xyXG5cclxuICAgICAgLyppZiAoZGVzdHJveWVkKVxyXG4gICAgICB7XHJcbiAgICAgICAgICB2YXIgZXhwbG9zaW9uQW5pbWF0aW9uID0gZXhwbG9zaW9ucy5nZXRGaXJzdEV4aXN0cyhmYWxzZSk7XHJcbiAgICAgICAgICBleHBsb3Npb25BbmltYXRpb24ucmVzZXQodGFuay54LCB0YW5rLnkpO1xyXG4gICAgICAgICAgZXhwbG9zaW9uQW5pbWF0aW9uLnBsYXkoJ2thYm9vbScsIDMwLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgIH0qL1xyXG4gIH0sXHJcblxyXG4gIGtpbGxBbmltYXRpb246IGZ1bmN0aW9uIChhbmltYXRpb24pIHtcclxuICAgIC8vY29uc29sZS5sb2coJ2VuZW15RHlpbmdBbmltYXRpb24nKTtcclxuICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4oYW5pbWF0aW9uKS50byggeyBhbHBoYTogMCB9LCAxMDAwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcclxuICB9LFxyXG5cclxuICBoaXRFbmVteTogZnVuY3Rpb24gKGVuZW15KSB7XHJcbiAgICAvL2NvbnNvbGUubG9nKCdISVQhJyk7XHJcbiAgICBmb3IgKHZhciBpID0gdGhpcy5lbmVteXNTb2xkaWVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICBpZihlbmVteSA9PT0gdGhpcy5lbmVteXNTb2xkaWVyc1tpXSlcclxuICAgICAge1xyXG4gICAgICAgIHRoaXMuZW5lbXlzU29sZGllcnMuc3BsaWNlKGksMSk7XHJcblxyXG4gICAgICAgIHZhciBlbmVteUR5aW5nQW5pbWF0aW9uID0gdGhpcy5lbmVteUR5aW5nQW5pbWF0aW9ucy5nZXRGaXJzdEV4aXN0cyhmYWxzZSk7XHJcbiAgICAgICAgZW5lbXlEeWluZ0FuaW1hdGlvbi5yZXNldChlbmVteS54LCBlbmVteS55KTtcclxuICAgICAgICBlbmVteUR5aW5nQW5pbWF0aW9uLnBsYXkoJ2VuZW15ZHlpbmcnLCAzMCwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW5lbXkua2lsbCgpO1xyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZUVuZW15OiBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZW5lbXkgPSBuZXcgRW5lbXkodGhpcy5nYW1lLCB0aGlzLmdhbWUud29ybGQucmFuZG9tWCwgMCk7XHJcbiAgICB0aGlzLmdhbWUucGh5c2ljcy5lbmFibGUoZW5lbXksIFBoYXNlci5QaHlzaWNzLkFSQ0FERSk7XHJcbiAgICB0aGlzLmVuZW15c1NvbGRpZXJzLnB1c2goZW5lbXkpO1xyXG4gICAgXHJcbiAgfSxcclxuXHJcbiAgY2hlY2tPdmVybGFwOiBmdW5jdGlvbiAoc3ByaXRlQSwgc3ByaXRlQikge1xyXG4gICAgdmFyIGJvdW5kc0EgPSBzcHJpdGVBLmdldEJvdW5kcygpO1xyXG4gICAgdmFyIGJvdW5kc0IgPSBzcHJpdGVCLmdldEJvdW5kcygpO1xyXG5cclxuICAgIHJldHVybiBQaGFzZXIuUmVjdGFuZ2xlLmludGVyc2VjdHMoYm91bmRzQSwgYm91bmRzQik7XHJcbiAgfSxcclxuXHJcbiAgZW5kR2FtZTogZnVuY3Rpb24gKCkge1xyXG4gICAgXHJcbiAgfSxcclxuXHJcbiAgb25JbnB1dERvd246IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnTWVudScpO1xyXG4gIH1cclxufTtcclxuIiwidmFyIEdhbWVvdmVyID0gZnVuY3Rpb24gKCkge307XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZW92ZXI7XG5cbkdhbWVvdmVyLnByb3RvdHlwZSA9IHtcblxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCA9IHRoaXMuZ2FtZS53aWR0aCAvIDJcbiAgICAgICwgeSA9IHRoaXMuZ2FtZS5oZWlnaHQgLyAyO1xuXG4gICAgLyp0aGlzLnRpdGxlVHh0ID0gdGhpcy5hZGQuYml0bWFwVGV4dCh4LCB5LCAnbWluZWNyYWZ0aWEnLCAnS2lsbGVkOiAnICk7XG4gICAgdGhpcy50aXRsZVR4dC5hbGlnbiA9ICdjZW50ZXInO1xuICAgIHRoaXMudGl0bGVUeHQueCA9IHRoaXMuZ2FtZS53aWR0aCAvIDIgLSB0aGlzLnRpdGxlVHh0LnRleHRXaWR0aCAvIDI7Ki9cblxuICAgIC8veSA9IHkgKyB0aGlzLnRpdGxlVHh0LmhlaWdodCArIDU7XG4gICAgdGhpcy5zdGFydFR4dCA9IHRoaXMuYWRkLmJpdG1hcFRleHQoeCwgeSwgJ21pbmVjcmFmdGlhJywgJ0dBTUUgT1ZFUicpO1xuICAgIHRoaXMuc3RhcnRUeHQuYWxpZ24gPSAnY2VudGVyJztcbiAgICB0aGlzLnN0YXJ0VHh0LnggPSB0aGlzLmdhbWUud2lkdGggLyAyIC0gdGhpcy5zdGFydFR4dC50ZXh0V2lkdGggLyAyO1xuICAgIFxuICAgIHRoaXMuaW5wdXQub25Eb3duLmFkZCh0aGlzLm9uRG93biwgdGhpcyk7XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICBvbkRvd246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ01lbnUnKTtcbiAgICAvL3RoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnR2FtZW92ZXInKTtcbiAgfVxufTtcbiIsInZhciBNZW51ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnRleHQgPSBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZW51O1xuXG5NZW51LnByb3RvdHlwZSA9IHtcblxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeCA9IHRoaXMuZ2FtZS53aWR0aCAvIDJcbiAgICAgICwgeSA9IHRoaXMuZ2FtZS5oZWlnaHQgLyAyO1xuXG4gICAgXG4gICAgdGhpcy5sb2dvVGV4dCA9IHRoaXMuYWRkLmJpdG1hcFRleHQoeCwgeSAtIDIwMCwgJ21pbmVjcmFmdGlhJywgJ0xTRycsIDE2NCApO1xuICAgIHRoaXMubG9nb1RleHQuYWxpZ24gPSAnY2VudGVyJztcbiAgICB0aGlzLmxvZ29UZXh0LnggPSB0aGlzLmdhbWUud2lkdGggLyAyIC0gdGhpcy5sb2dvVGV4dC50ZXh0V2lkdGggLyAyO1xuXG4gICAgdGhpcy5kZXNjaXB0aW9uVHh0ID0gdGhpcy5hZGQuYml0bWFwVGV4dCh4LCB5ICsgMTAsICdtaW5lY3JhZnRpYScsICdMSVRUTEUgU0hJVFRZIEdBTUVTJywgMjcgKTtcbiAgICB0aGlzLmRlc2NpcHRpb25UeHQuYWxpZ24gPSAnY2VudGVyJztcbiAgICB0aGlzLmRlc2NpcHRpb25UeHQueCA9IHRoaXMuZ2FtZS53aWR0aCAvIDIgLSB0aGlzLmRlc2NpcHRpb25UeHQudGV4dFdpZHRoIC8gMjtcblxuICAgIHRoaXMudGl0bGVUeHQgPSB0aGlzLmFkZC5iaXRtYXBUZXh0KHgsIHkgKyAxMDAsICdtaW5lY3JhZnRpYScsICdOYWFwdXJpbmthdWh1JyApO1xuICAgIHRoaXMudGl0bGVUeHQuYWxpZ24gPSAnY2VudGVyJztcbiAgICB0aGlzLnRpdGxlVHh0LnggPSB0aGlzLmdhbWUud2lkdGggLyAyIC0gdGhpcy50aXRsZVR4dC50ZXh0V2lkdGggLyAyO1xuXG4gICAgdGhpcy5zdGFydFR4dCA9IHRoaXMuYWRkLmJpdG1hcFRleHQoeCwgdGhpcy5nYW1lLmhlaWdodCAtIHRoaXMudGl0bGVUeHQuaGVpZ2h0IC0gMTUsICdtaW5lY3JhZnRpYScsICdQcmVzcyBzY3JlZW4gdG8gc3RhcnQnKTtcbiAgICB0aGlzLnN0YXJ0VHh0LmFsaWduID0gJ2NlbnRlcic7XG4gICAgdGhpcy5zdGFydFR4dC54ID0gdGhpcy5nYW1lLndpZHRoIC8gMiAtIHRoaXMuc3RhcnRUeHQudGV4dFdpZHRoIC8gMjtcblxuICAgIHRoaXMuaW5wdXQub25Eb3duLmFkZCh0aGlzLm9uRG93biwgdGhpcyk7XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICBvbkRvd246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ0dhbWUnKTtcbiAgICAvL3RoaXMuZ2FtZS5zY2FsZS5zdGFydEZ1bGxTY3JlZW4oKTtcbiAgfVxufTtcbiIsInZhciBQcmVsb2FkZXIgPSBmdW5jdGlvbiAoZ2FtZSkge1xyXG4gIHRoaXMuYXNzZXQgPSBudWxsO1xyXG4gIHRoaXMucmVhZHkgPSBmYWxzZTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUHJlbG9hZGVyO1xyXG5cclxuUHJlbG9hZGVyLnByb3RvdHlwZSA9IHtcclxuXHJcbiAgcHJlbG9hZDogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5hc3NldCA9IHRoaXMuYWRkLnNwcml0ZSh0aGlzLmdhbWUud2lkdGggLyAyLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMiwgJ3ByZWxvYWRlcicpO1xyXG4gICAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblxyXG4gICAgICB0aGlzLmxvYWQub25Mb2FkQ29tcGxldGUuYWRkT25jZSh0aGlzLm9uTG9hZENvbXBsZXRlLCB0aGlzKTtcclxuICAgICAgdGhpcy5sb2FkLnNldFByZWxvYWRTcHJpdGUodGhpcy5hc3NldCk7XHJcbiAgICAgIHRoaXMubG9hZC5zcHJpdGVzaGVldCgna2Fib29tJywgJ2Fzc2V0cy9leHBsb3Npb24ucG5nJywgNjQsIDY0LCAyMyk7XHJcbiAgICAgIHRoaXMubG9hZC5zcHJpdGVzaGVldCgnYmlnRXhwbG9zaW9uJywgJ2Fzc2V0cy9iaWctZXhwbG9zaW9uLnBuZycsIDI1NiwgMTI4LCAxMik7XHJcbiAgICAgIHRoaXMubG9hZC5zcHJpdGVzaGVldCgnc21hbGxFeHBsb3Npb24nLCAnYXNzZXRzL3NtYWxsLWV4cGxvc2lvbi5wbmcnLCA5NiwgOTYsIDQ4KTtcclxuICAgICAgdGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdlbmVteWR5aW5nJywgJ2Fzc2V0cy9lbmVteWR5aW5nLnBuZycsIDYzLCA2NCwgMjApO1xyXG4gICAgICB0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ2VuZW15U3ByaXRlJywgJ2Fzc2V0cy9lbmVteS5wbmcnLCA2NCwgNjQsIDE1KTtcclxuICAgICAgdGhpcy5sb2FkLmltYWdlKCdkYXJrX2dyYXNzJywgJ2Fzc2V0cy9kYXJrX2dyYXNzLnBuZycpO1xyXG4gICAgICB0aGlzLmxvYWQuaW1hZ2UoJ2Jsb29kJywgJ2Fzc2V0cy9ibG9vZC5qcGcnKTtcclxuICAgICAgdGhpcy5sb2FkLmltYWdlKCdlYXJ0aCcsICdhc3NldHMvZWFydGgucG5nJyk7XHJcbiAgICAgIHRoaXMubG9hZC5pbWFnZSgnZW5lbXknLCAnYXNzZXRzL2ludmFkZXIucG5nJyk7XHJcbiAgICAgIHRoaXMubG9hZC5pbWFnZSgndHVycmV0JywgJ2Fzc2V0cy90dXJyZXQucG5nJyk7XHJcbiAgICAgIHRoaXMubG9hZC5pbWFnZSgnYnVsbGV0JywgJ2Fzc2V0cy9idWxsZXQucG5nJyk7XHJcbiAgICAgIHRoaXMubG9hZC5iaXRtYXBGb250KCdtaW5lY3JhZnRpYScsICdhc3NldHMvbWluZWNyYWZ0aWEucG5nJywgJ2Fzc2V0cy9taW5lY3JhZnRpYS54bWwnKTtcclxuICAgICAgdGhpcy5sb2FkLmF1ZGlvKCdzZngnLCAnYXNzZXRzL2F1ZGlvL1NvdW5kRWZmZWN0cy9meF9taXhkb3duLm9nZycpO1xyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5hc3NldC5jcm9wRW5hYmxlZCA9IGZhbHNlO1xyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCEhdGhpcy5yZWFkeSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnTWVudScpO1xyXG4gICAgICB9XHJcbiAgfSxcclxuXHJcbiAgb25Mb2FkQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMucmVhZHkgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuIiwidmFyIFV0aWxzID0ge1xuICAgIGNvbnRhaW5zT2JqZWN0OiBmdW5jdGlvbihvYmosIGxpc3QpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVdGlsczsiXX0=
