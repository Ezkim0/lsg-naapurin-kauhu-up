(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\entities\\enemy.js":[function(require,module,exports){
var Enemy = function (game, x, y) {

    Phaser.Sprite.call(this, game, x, y, 'enemySprite');
		game.add.existing(this);
		this.animations.add('run');
		this.animations.play('run', 25, true);

		this.hitPoints = 1;
		this.width = 55;
		this.height = 55;

		this.healthBar = new Phaser.Rectangle(this.x, this.y, 30, 5);
		//game.debug.geom(this.healthBar,'#ff6600');
};

Enemy.prototype = Object.create(Phaser.Sprite.prototype);
Enemy.prototype.constructor = Enemy;

/**
 * Automatically called by World.update
 */
Enemy.prototype.update = function() {
	this.move();

	if(this.hitPoints < 5) {
		this.healthBar.x = this.x + this.width / 2 - 15;
		this.healthBar.y = this.y;
		this.healthBar.width = this.hitPoints * (30 / 5);
		this.game.debug.geom(this.healthBar,'#D71E1E');
	}
	
};

Enemy.prototype.move = function() {
	this.y += 1.7;
};

Enemy.prototype.hit = function() {
	this.hitPoints -= 1;
	this.bloodSpread();
};

Enemy.prototype.bloodSpread = function() {
	//console.log('SPLÃ„TS');

};

module.exports = Enemy;

},{}],"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(1024, 768, Phaser.AUTO, 'naapurinkauhu-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('GameOver', require('./states/gameover'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\boot.js","./states/game":"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\game.js","./states/gameover":"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\gameover.js","./states/menu":"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\menu.js","./states/preloader":"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\preloader.js","./utils":"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\utils.js"}],"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    //this.game.input.maxPointers = 1;

    this.input.maxPointers = 1;
    this.stage.disableVisibilityChange = true;

    if (this.game.device.desktop)
    {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.minWidth = 480;
        this.scale.minHeight = 260;
        this.scale.maxWidth = 1024;
        this.scale.maxHeight = 768;
        this.scale.forceLandscape = true;
        this.scale.pageAlignHorizontally = true;
        this.scale.windowConstraints.bottom = "visual";
    }
    else
    {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.setMinMax(480, 260, 1024, 768);
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.scale.forceOrientation(true, false);
        this.scale.setResizeCallback(this.gameResized, this);
        this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this);
        this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this);
        this.scale.windowConstraints.bottom = "visual";
        this.scale.refresh();
    }

    this.game.state.start('Preloader');
  },

    gameResized: function (width, height) {

        //  This could be handy if you need to do any extra processing if the game resizes.
        //  A resize could happen if for example swapping orientation on a device or resizing the browser window.
        //  Note that this callback is only really useful if you use a ScaleMode of RESIZE and place it inside your main game state.

    },

    enterIncorrectOrientation: function () {

        BasicGame.orientated = false;

        document.getElementById('orientation').style.display = 'block';

    },

    leaveIncorrectOrientation: function () {

        BasicGame.orientated = true;

        document.getElementById('orientation').style.display = 'none';

    }
};

},{}],"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\game.js":[function(require,module,exports){
var Enemy = require('../entities/enemy');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    //this.grassTileSprite = this.game.add.tileSprite(0, 0, this.game.width, this.game.height, 'dark_grass');
    //this.sandTilesprite = this.game.add.tileSprite(0, this.game.height - 128, this.game.width, 128, 'earth');

    this.levels = [{id:"Level 1", length:2, speed:2000} , {id:"Level 2", length:5, speed:1500} , {id:"Level 3", length:10, speed:1000} , {id:"Level 4", length:15, speed:300} , {id:"Level 5", length:30, speed:50}, {id:"Level 6", length:40, speed:10}];
    this.levelIndex = 0;
    this.levelLoading = true;

    this.backGround = this.game.add.sprite(0,0, 'bg');

    this.game.time.advancedTiming = true;

    this.enemysSoldiers = [];
    this.soldiers = [];
    this.enemySoldiersCount = 10;
    this.soldiersCount = 10;
    this.gameover = false;
    this.game.enemyKilled = 0;

    this.soldiersLeftText = this.add.bitmapText(0, 60, 'minecraftia', this.soldiersCount.toString() );
    this.soldiersLeftText.x = this.game.width - this.soldiersLeftText.textWidth - 20;

    this.currentLevelText = this.add.bitmapText(0, 20, 'minecraftia', this.currentLevel().id );
    this.currentLevelText.x = this.game.width - this.currentLevelText.textWidth - 20;

    // Bullets
    this.fireRate = 50;
    this.nextFire = 10;

    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;

    this.bullets.createMultiple(100, 'bullet');
    this.bullets.setAll('checkWorldBounds', true);
    this.bullets.setAll('outOfBoundsKill', true);

    //this.turretHolder = this.game.add.sprite(this.game.width / 2, this.game.height - 75, 'turretholder');
    
    this.sprite = this.game.add.sprite(this.game.width / 2 - 20, this.game.height - 75, 'turret');
    this.sprite.scale.set(0.25,0.25);
    this.sprite.anchor.set(0, 0.5);
    this.sprite.visible = false;

    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.allowRotation = false;

    this.enemyTimer = this.game.time.create(false);
    this.enemyTimer.loop(this.currentLevel().speed, this.createEnemy, this);
    this.enemyTimer.start();

    // Enemy animations 
    this.enemyDyingAnimations = this.game.add.group();

    for (var i = 0; i < 30; i++)
    {
        var enemyDyingAnimation = this.enemyDyingAnimations.create(0, 0, 'enemydying', [0], false);
        enemyDyingAnimation.anchor.setTo(0, -0.25);
        enemyDyingAnimation.animations.add('enemydying');
    }

    // concentratedFire
    this.explosions = this.game.add.group();
    //this.explosions.enableBody = true;
    //this.explosions.physicsBodyType = Phaser.Physics.ARCADE;
    for (var j = 0; j < 10; j++)
    {
        var explosionAnimation = this.explosions.create(0, 0, 'smallExplosion', [0], false);
        explosionAnimation.anchor.setTo(0.5, 0.5);
        explosionAnimation.animations.add('smallExplosion');
    }

    //this.concentratedFireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

    //this.emitter = this.game.add.emitter(0, 0, 100);
    //this.emitter.particleFriction = 0.1;

  },

  update: function () {

    this.game.debug.text(this.game.time.fps || '--', 2, 14, '#00ff00');

    if(this.gameover) {
      return;
    }

    /*if(this.enemysSoldiers.length < this.enemySoldiersCount){
      this.createEnemy();
    }*/

    if(!this.enemysSoldiers) {
      return;
    }

    for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
      var enemy = this.enemysSoldiers[i];

      this.game.physics.arcade.overlap(this.bullets, this.enemysSoldiers[i], this.bulletHitEnemy, null, this);
      
      if(enemy.y >= this.game.height - 150) {
        this.soldiersCount -= 1;
        
        this.enemysSoldiers.splice(i,1);
        this.soldiersLeftText.setText(this.soldiersCount.toString());

        var explosiong = this.explosions.getFirstExists(false);
        explosiong.reset(enemy.x, enemy.y);
        explosiong.play('smallExplosion', 30, false, false);

        enemy.destroy();

        if(this.soldiersCount <= 0){
          this.game.state.start('GameOver');
        }
      }

    }

    this.sprite.rotation = this.game.physics.arcade.angleToPointer(this.sprite);
    if (this.game.input.activePointer.isDown) {
      this.sprite.visible = true;
      this.fire();
    } else {
       this.sprite.visible = false;
    }

    /*if (this.concentratedFireButton.isDown) {
       this.concentratedFire(this.game.input.activePointer.x - 100,this.game.input.activePointer.y - 100);
    }*/

  },

  fire: function () {
    if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0)
    {
      this.nextFire = this.game.time.now + this.fireRate;
      var bullet = this.bullets.getFirstDead();
      bullet.reset(this.sprite.x - 2, this.sprite.y - 5);
      bullet.rotation = this.game.physics.arcade.moveToPointer(bullet, 1500, this.game.input.activePointer);
    }
  },

  currentLevel: function () {
    return this.levels[this.levelIndex];
  },

  nextLevel: function () {
    this.levelIndex++;

    if(this.currentLevel()) {
      
      //this.enemyTimer.delay = this.currentLevel().speed;
      this.enemyTimer.destroy();
      this.enemyTimer = this.game.time.create(false);
      this.enemyTimer.loop(this.currentLevel().speed, this.createEnemy, this);
      this.enemyTimer.start();


      this.currentLevelText.destroy();
      this.currentLevelText = this.add.bitmapText(0, 20, 'minecraftia', this.currentLevel().id );
      this.currentLevelText.x = this.game.width - this.currentLevelText.textWidth - 20;


    } else {
      this.game.state.start('GameOver');
    }    
  },

  concentratedFire: function (x,y) {
        for (var i = this.explosions.length - 1; i >= 0; i--) {
          var explosionsAnimation = this.explosions.getAt(i);
          explosionsAnimation.reset(x + Math.random()*200, y + Math.random()*200);
          explosionsAnimation.play('smallExplosion', 30, false, true);
        }

        for (var j = this.enemysSoldiers.length - 1; j >= 0; j--) {
          var enemy = this.enemysSoldiers[j];
           this.game.physics.arcade.overlap(this.explosions, enemy, this.hitEnemy, null, this);
          
        }
  },

  bulletHitEnemy: function (enemy, bullet) {

      /*this.emitter.makeParticles('blood');
      var blood = new Phaser.Rectangle(0, 0, 30, 5);
      this.emitter.makeParticles(blood);

      this.emitter.rotation = bullet.rotation;

      this.emitter.gravity = 0;
      this.emitter.maxRotation = 0;
      this.emitter.minRotation = 0;

      this.emitter.setAlpha(1, 0, 600);

      var p1 = new Phaser.Point (1,0);
      p1.rotate(0,0,bullet.rotation + 0.5);
      p1.setMagnitude(200);
      
      var p2 = new Phaser.Point (1,0);
      p2.rotate(0,0,bullet.rotation - 0.5);
      p2.setMagnitude(200);

      this.emitter.maxParticleSpeed = p1;
      this.emitter.minParticleSpeed = p2;
      //this.emitter.rotation = 0;
      this.emitter.x = enemy.x + 30;
      this.emitter.y = enemy.y + 35;

      this.emitter.start(true, 600, null, 10);*/
      bullet.kill();

      for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
        if(enemy === this.enemysSoldiers[i])
        {
          enemy.hit();

          if(enemy.hitPoints === 0) {
            this.enemysSoldiers.splice(i,1);

            var enemyDyingAnimation = this.enemyDyingAnimations.getFirstExists(false);
            enemyDyingAnimation.reset(enemy.x, enemy.y);
            enemyDyingAnimation.alpha = 1;
            enemyDyingAnimation.play('enemydying', 30, false, false);
            this.game.time.events.add(Phaser.Timer.SECOND * 1, this.fadeAnimation, this, enemyDyingAnimation);
          }
        }
      }
      
      if(enemy.hitPoints === 0) {
        enemy.kill();
        this.game.enemyKilled++;

        if(this.game.enemyKilled >= this.currentLevel().length){
          this.nextLevel();
        }
      }

      //var destroyed = enemies[tank.name].damage();

      /*if (destroyed)
      {
          var explosionAnimation = explosions.getFirstExists(false);
          explosionAnimation.reset(tank.x, tank.y);
          explosionAnimation.play('kaboom', 30, false, true);
      }*/
  },

  fadeAnimation: function (animation) {
    //console.log("-----");
    //console.log(animation);
    var fadeAnim = this.game.add.tween(animation).to( { alpha: 0 }, 1000, Phaser.Easing.Linear.None, true);
    fadeAnim.onComplete.add(function () { this.removeTween(animation); }, this);

  },

  hitEnemy: function (enemy) {
    for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
      if(enemy === this.enemysSoldiers[i])
      {
        this.enemysSoldiers.splice(i,1);

        var enemyDyingAnimation = this.enemyDyingAnimations.getFirstExists(false);
        enemyDyingAnimation.reset(enemy.x, enemy.y);
        enemyDyingAnimation.play('enemydying', 30, false, false);
      }
    }
    enemy.kill();
  },

  removeTween: function (animation) {
    animation.kill();
  },
  killAnimation: function (animation) {
    //console.log("this.enemyDyingAnimations");
    //console.log(this.enemyDyingAnimations);
  },

  checkOverlapEnemyX: function () {
    
    

  },

  createEnemy: function () {

    var enemyX = Math.floor(Math.random() * (this.game.width - 65));

    /*var pass = true;
    for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
      var soldier = this.enemysSoldiers[i];

      if(enemyX < soldier.x + 65 && enemyX > soldier.x - 65 ) {
        pass = false;
      }

    }*/

    /*if(!pass){
      this.createEnemy();
      return;
    }*/

    var enemy = new Enemy(this.game, enemyX, 0);
    this.game.physics.enable(enemy, Phaser.Physics.ARCADE);
    this.enemysSoldiers.push(enemy);
    
  },

  checkOverlap: function (spriteA, spriteB) {
    var boundsA = spriteA.getBounds();
    var boundsB = spriteB.getBounds();

    return Phaser.Rectangle.intersects(boundsA, boundsB);
  },

  endGame: function () {
    
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/enemy":"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\entities\\enemy.js"}],"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\gameover.js":[function(require,module,exports){
var Gameover = function () {};

module.exports = Gameover;

Gameover.prototype = {

  create: function () {
    var x = this.game.width / 2
      , y = this.game.height / 2;

    this.titleTxt = this.add.bitmapText(x, y, 'minecraftia', 'Killed: ' + this.game.enemyKilled );
    this.titleTxt.align = 'center';
    this.titleTxt.x = this.game.width / 2 - this.titleTxt.textWidth / 2;

    //y = y + this.titleTxt.height + 5;
    this.startTxt = this.add.bitmapText(x, y + 50, 'minecraftia', 'GAME OVER');
    this.startTxt.align = 'center';
    this.startTxt.x = this.game.width / 2 - this.startTxt.textWidth / 2;
    
    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start('Menu');
    //this.game.state.start('Gameover');
  }
};

},{}],"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2
      , y = this.game.height / 2;

    
    this.logoText = this.add.bitmapText(x, y - 200, 'minecraftia', 'LSG', 164 );
    this.logoText.align = 'center';
    this.logoText.x = this.game.width / 2 - this.logoText.textWidth / 2;

    this.desciptionTxt = this.add.bitmapText(x, y + 10, 'minecraftia', 'LITTLE SHITTY GAMES', 27 );
    this.desciptionTxt.align = 'center';
    this.desciptionTxt.x = this.game.width / 2 - this.desciptionTxt.textWidth / 2;

    this.titleTxt = this.add.bitmapText(x, y + 100, 'minecraftia', 'Naapurinkauhu' );
    this.titleTxt.align = 'center';
    this.titleTxt.x = this.game.width / 2 - this.titleTxt.textWidth / 2;

    this.startTxt = this.add.bitmapText(x, this.game.height - this.titleTxt.height - 15, 'minecraftia', 'Press screen to start');
    this.startTxt.align = 'center';
    this.startTxt.x = this.game.width / 2 - this.startTxt.textWidth / 2;

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start('Game');
    //this.game.scale.startFullScreen();
  }
};

},{}],"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
      this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);
      this.load.spritesheet('kaboom', 'assets/explosion.png', 64, 64, 23);
      this.load.spritesheet('bigExplosion', 'assets/big-explosion.png', 256, 128, 12);
      this.load.spritesheet('smallExplosion', 'assets/small-explosion.png', 96, 96, 48);
      this.load.spritesheet('enemydying', 'assets/enemydying.png', 63, 64, 20);
      this.load.spritesheet('enemySprite', 'assets/enemy.png', 64, 64, 15);
      this.load.image('bg', 'assets/bg.png');
      this.load.image('blood', 'assets/blood.jpg');
      this.load.image('earth', 'assets/earth.png');
      this.load.image('enemy', 'assets/invader.png');
      this.load.image('turret', 'assets/turret.png');
      this.load.image('turretholder', 'assets/gun-holder.png');
      this.load.image('bullet', 'assets/bullet.png');
      this.load.bitmapFont('minecraftia', 'assets/minecraftia.png', 'assets/minecraftia.xml');
      this.load.audio('sfx', 'assets/audio/SoundEffects/fx_mixdown.ogg');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
        this.game.state.start('Menu');
      }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["c:\\Projects\\Git\\lsg-naapurin-kauhu-up\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
