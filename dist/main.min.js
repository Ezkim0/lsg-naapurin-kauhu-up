(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var w = window.innerWidth * window.devicePixelRatio,
    h = window.innerHeight * window.devicePixelRatio;

//var game = new Phaser.Game((h > w) ? h : w, (h > w) ? w : h, Phaser.AUTO, 'naapurinkauhu-game');
var game = new Phaser.Game(1024, 768, Phaser.AUTO, 'naapurinkauhu-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
//game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('GameOver', require('./states/gameover'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\boot.js","./states/game":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\game.js","./states/gameover":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\gameover.js","./states/menu":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\menu.js","./states/preloader":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\preloader.js","./utils":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\utils.js"}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\entities\\enemy.js":[function(require,module,exports){
var Enemy = function (game, x, y) {

    Phaser.Sprite.call(this, game, x, y, 'enemySprite');
		game.add.existing(this);
		this.animations.add('run');
		this.animations.play('run', 25, true);
}

Enemy.prototype = Object.create(Phaser.Sprite.prototype);
Enemy.prototype.constructor = Enemy;

/**
 * Automatically called by World.update
 */
Enemy.prototype.update = function() {
	this.move();

};

Enemy.prototype.move = function() {
	this.y += 1.7;
};

module.exports = Enemy;

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    //this.game.input.maxPointers = 1;

    this.input.maxPointers = 1;
    this.stage.disableVisibilityChange = true;

    if (this.game.device.desktop)
    {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.setMinMax(480, 260, 1024, 768);
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.scale.setScreenSize(true);
        this.scale.refresh();
    }
    else
    {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.setMinMax(480, 260, 1024, 768);
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.scale.forceOrientation(true, false);
        this.scale.setResizeCallback(this.gameResized, this);
        this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this);
        this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this);
        this.scale.setScreenSize(true);
        this.scale.refresh();
    }

    this.game.state.start('Preloader');
  },

  gameResized: function (width, height) {

        //  This could be handy if you need to do any extra processing if the game resizes.
        //  A resize could happen if for example swapping orientation on a device or resizing the browser window.
        //  Note that this callback is only really useful if you use a ScaleMode of RESIZE and place it inside your main game state.

    },

    enterIncorrectOrientation: function () {

        BasicGame.orientated = false;

        document.getElementById('orientation').style.display = 'block';

    },

    leaveIncorrectOrientation: function () {

        BasicGame.orientated = true;

        document.getElementById('orientation').style.display = 'none';

    }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\game.js":[function(require,module,exports){
var Enemy = require('../entities/enemy');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    this.grassTileSprite = this.game.add.tileSprite(0, 0, this.game.width, this.game.height, 'dark_grass');
    this.sandTilesprite = this.game.add.tileSprite(0, this.game.height - 70, this.game.width, 50, 'earth');

    this.enemysSoldiers = [];
    this.soldiers = [];
    this.enemySoldiersCount = 5;
    this.soldiersCount = 10;
    this.gameover = false;

    this.soldiersLeftText = this.add.bitmapText(0, 20, 'minecraftia', this.soldiersCount.toString() );
    this.soldiersLeftText.x = this.game.width - this.soldiersLeftText.textWidth - 20;

    // Bullets
    this.fireRate = 50;
    this.nextFire = 10;

    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;

    this.bullets.createMultiple(100, 'bullet');
    this.bullets.setAll('checkWorldBounds', true);
    this.bullets.setAll('outOfBoundsKill', true);

    this.sprite = this.game.add.sprite(this.game.width / 2, this.game.height - 70, 'turret');
    this.sprite.anchor.set(0.5);

    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);

    this.sprite.body.allowRotation = false;

    // Enemy animations 
    this.enemyDyingAnimations = this.game.add.group();

    for (var i = 0; i < 500; i++)
    {
        var enemyDyingAnimation = this.enemyDyingAnimations.create(0, 0, 'enemydying', [0], false);
        enemyDyingAnimation.anchor.setTo(0, -0.25);
        enemyDyingAnimation.animations.add('enemydying');
    }

    // concentratedFire
    this.explosions = this.game.add.group();
    this.explosions.enableBody = true;
    this.explosions.physicsBodyType = Phaser.Physics.ARCADE;
    for (var j = 0; j < 10; j++)
    {
        var explosionAnimation = this.explosions.create(0, 0, 'smallExplosion', [0], false);
        explosionAnimation.anchor.setTo(0.5, 0.5);
        explosionAnimation.animations.add('smallExplosion');
    }

    /*this.bot = this.game.add.sprite(100, 100, 'enemySprite');
    this.bot.animations.add('run');
    this.bot.animations.play('run', 25, true);*/

    this.concentratedFireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

  },

  update: function () {

    if(this.gameover) return;

    if(this.enemysSoldiers.length < this.enemySoldiersCount){
      this.createEnemy();
    }

    for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
      var enemy = this.enemysSoldiers[i];

      this.game.physics.arcade.overlap(this.bullets, this.enemysSoldiers[i], this.bulletHitEnemy, null, this);
      
      //this.game.physics.arcade.overlap(this.explosions, this.enemysSoldiers[i], this.hitEnemy, null, this);


      //this.enemysSoldiers[i].update();
      if(enemy.y >= this.game.height - 70) {
        this.soldiersCount -= 1;
        enemy.destroy();
        this.enemysSoldiers.splice(i,1);
        this.soldiersLeftText.setText(this.soldiersCount.toString());

        
        var enemyDyingAnimation = this.enemyDyingAnimations.getFirstExists(false);
        enemyDyingAnimation.reset(enemy.x, enemy.y);
        enemyDyingAnimation.play('kaboom', 30, false, true);

        if(this.soldiersCount <= 0){
          //console.log("PELI LOPPU!");
          this.game.state.start('GameOver');
        }
      }

    }

    this.sprite.rotation = this.game.physics.arcade.angleToPointer(this.sprite);
    if (this.game.input.activePointer.isDown)
    {
      this.fire();
    }

    if (this.concentratedFireButton.isDown) {
       this.concentratedFire(this.game.input.activePointer.x - 100,this.game.input.activePointer.y - 100);
    }

    //this.game.debug.spriteBounds(this.explosions);
    //this.game.debug.spriteCorners(this.explosions, true, true);

  },

  fire: function () {
    if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0)
        {
            this.nextFire = this.game.time.now + this.fireRate;

            var bullet = this.bullets.getFirstDead();

            bullet.reset(this.sprite.x - 8, this.sprite.y - 8);

            this.game.physics.arcade.moveToPointer(bullet, 1500);
            bullet.rotation = this.game.physics.arcade.moveToPointer(bullet, 2500, this.game.input.activePointer, 400);
        }
  },

  concentratedFire: function (x,y) {
        console.log(this.explosions.x);

        for (var i = this.explosions.length - 1; i >= 0; i--) {
          var explosionsAnimation = this.explosions.getAt(i);
          explosionsAnimation.reset(x + Math.random()*200, y + Math.random()*200);
          //enemyDyingAnimation.reset(x, y);
          explosionsAnimation.play('smallExplosion', 30, false, true);
          console.log('---------------------');
          console.log(explosionsAnimation.x);
          console.log(explosionsAnimation.y);
        }

        for (var j = this.enemysSoldiers.length - 1; j >= 0; j--) {
          var enemy = this.enemysSoldiers[j];
 
          this.game.physics.arcade.overlap(this.explosions, enemy, this.hitEnemy, null, this);
          
        }
  },

  bulletHitEnemy: function (enemy, bullet) {
      bullet.kill();

      for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
        if(enemy === this.enemysSoldiers[i])
        {
          this.enemysSoldiers.splice(i,1);

          var enemyDyingAnimation = this.enemyDyingAnimations.getFirstExists(false);
          enemyDyingAnimation.reset(enemy.x, enemy.y);
          enemyDyingAnimation.play('enemydying', 30, false, false);
        }
      }
      enemy.kill();

      //var destroyed = enemies[tank.name].damage();

      /*if (destroyed)
      {
          var explosionAnimation = explosions.getFirstExists(false);
          explosionAnimation.reset(tank.x, tank.y);
          explosionAnimation.play('kaboom', 30, false, true);
      }*/
  },

  hitEnemy: function (enemy) {
    //console.log('HIT!');
    for (var i = this.enemysSoldiers.length - 1; i >= 0; i--) {
      if(enemy === this.enemysSoldiers[i])
      {
        this.enemysSoldiers.splice(i,1);

        var enemyDyingAnimation = this.enemyDyingAnimations.getFirstExists(false);
        enemyDyingAnimation.reset(enemy.x, enemy.y);
        enemyDyingAnimation.play('enemydying', 30, false, false);
      }
    }
    enemy.kill();
  },

  createEnemy: function () {
    var enemy = new Enemy(this.game, this.game.world.randomX, 0);
    this.game.physics.enable(enemy, Phaser.Physics.ARCADE);
    this.enemysSoldiers.push(enemy);
    
  },

  checkOverlap: function (spriteA, spriteB) {
    var boundsA = spriteA.getBounds();
    var boundsB = spriteB.getBounds();

    return Phaser.Rectangle.intersects(boundsA, boundsB);
  },

  endGame: function () {
    
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/enemy":"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\entities\\enemy.js"}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\gameover.js":[function(require,module,exports){
var Gameover = function () {};

module.exports = Gameover;

Gameover.prototype = {

  create: function () {
    var x = this.game.width / 2
      , y = this.game.height / 2;

    this.titleTxt = this.add.bitmapText(x, y, 'minecraftia', 'Killed: ' );
    this.titleTxt.align = 'center';
    this.titleTxt.x = this.game.width / 2 - this.titleTxt.textWidth / 2;

    y = y + this.titleTxt.height + 5;
    this.startTxt = this.add.bitmapText(x, y, 'minecraftia', 'GAME OVER');
    this.startTxt.align = 'center';
    this.startTxt.x = this.game.width / 2 - this.startTxt.textWidth / 2;
    
    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start('Menu');
    //this.game.state.start('Gameover');
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2
      , y = this.game.height / 2;

    this.titleTxt = this.add.bitmapText(x, y, 'minecraftia', 'Naapurinkauhu' );
    this.titleTxt.align = 'center';
    this.titleTxt.x = this.game.width / 2 - this.titleTxt.textWidth / 2;

    this.startTxt = this.add.bitmapText(x, y + this.titleTxt.height + 5, 'minecraftia', 'Press screen to start');
    this.startTxt.align = 'center';
    this.startTxt.x = this.game.width / 2 - this.startTxt.textWidth / 2;

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start('Game');
    //this.game.scale.startFullScreen();
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);
      this.load.spritesheet('kaboom', 'assets/explosion.png', 64, 64, 23);
      this.load.spritesheet('bigExplosion', 'assets/big-explosion.png', 256, 128, 12);
      this.load.spritesheet('smallExplosion', 'assets/small-explosion.png', 96, 96, 48);
      this.load.spritesheet('enemydying', 'assets/enemydying.png', 63, 64, 20);
      this.load.spritesheet('enemySprite', 'assets/enemy.png', 64, 64, 15);
      this.load.image('dark_grass', 'assets/dark_grass.png');
      this.load.image('earth', 'assets/earth.png');
      this.load.image('enemy', 'assets/invader.png');
      this.load.image('turret', 'assets/turret.png');
      this.load.image('bullet', 'assets/bullet.png');
      this.load.bitmapFont('minecraftia', 'assets/minecraftia.png', 'assets/minecraftia.xml');
      this.load.audio('sfx', 'assets/audio/SoundEffects/fx_mixdown.ogg');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
        this.game.state.start('Menu');
      }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"D:\\Projects\\GIT\\lsg-naapurin-kauhu-up\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
